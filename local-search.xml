<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/31/jvm/"/>
    <url>/2023/03/31/jvm/</url>
    
    <content type="html"><![CDATA[<h1 id="jvm"><a href="#jvm" class="headerlink" title="jvm"></a>jvm</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure><h2 id="jvm的位置"><a href="#jvm的位置" class="headerlink" title="jvm的位置"></a>jvm的位置</h2><p>JRE包含jvm,所以jvm运行在操作系统之上的一种程序</p><h2 id="类加载器的种类-4种"><a href="#类加载器的种类-4种" class="headerlink" title="类加载器的种类(4种)"></a>类加载器的种类(4种)</h2><p>Bootstrap ClassLoader</p><p>Extension ClassLoader</p><p>Application ClassLoader</p><p>Custmo ClassLoader</p><h2 id="双亲委派机制（jdk1-2新增，作用：安全）（重点）"><a href="#双亲委派机制（jdk1-2新增，作用：安全）（重点）" class="headerlink" title="双亲委派机制（jdk1.2新增，作用：安全）（重点）"></a>双亲委派机制（jdk1.2新增，作用：安全）（重点）</h2><p>需要加载类时，会自底向上的去查找是否已经被加载过，如果没有则自顶向下尝试加载</p><h2 id="Native（重点）"><a href="#Native（重点）" class="headerlink" title="Native（重点）"></a>Native（重点）</h2><p>只要使用了Native关键字，说明Java的作用范围达不到了，会去调用底层c语言的库。</p><p>会进入本地方法栈，调用本地方法接口JUI。</p><p>JUI作用：扩展Java的使用，融合不同的编程语言为java所用</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>静态变量、常量、类信息（构造方法、接口定义）、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关（方法区储存static、final、Class、常量池）</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="栈（栈内存）"><a href="#栈（栈内存）" class="headerlink" title="栈（栈内存）"></a>栈（栈内存）</h2><p>栈：栈是一种数据结构，先进后出</p><p>队列：先进先出</p><p>（喝多了吐就是栈，吃多了拉就是队列）</p><p>栈的作用：主管程序的运行，生命周期和线程同步，线程结束，栈内存也就释放，对于栈来说，不存在垃圾回收问题</p><p>栈存储：8大基本类型，对象引用，实例的方法</p><p>栈运行原理：栈帧</p><p>栈满了：StackOverflowError</p><h2 id="三种jVM"><a href="#三种jVM" class="headerlink" title="三种jVM"></a>三种jVM</h2><ul><li>Sun公司 HotSpot</li><li>BEA JRockit</li><li>IBM J9vm</li></ul><h2 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h2><p>一个JVM只有一个堆内存，堆内存的大小是可以调节的。</p><p>类加载器读取了类文件后，一般会把什么东西放到堆中？类、方法、常量、变量、保存我们所以引用类型的真实对象。</p><p>堆内存中还要细分为三个区域</p><ul><li><p>新生区（伊甸园区）Young&#x2F;NEW</p></li><li><p>养老区 old</p></li><li><p>永久区 Perm</p></li></ul><p>jdk1.7和jdk1.8堆中的区别：将永久存储区改成了元空间</p><p>jdk1.7</p><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230324084616526.png" alt="image-20230324084616526"></p><p>jdk1.8</p><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230324084806801.png" alt="image-20230324084806801"></p><h5 id="新生区"><a href="#新生区" class="headerlink" title="新生区"></a>新生区</h5><ul><li>类：诞生和成长的地方，甚至死亡。</li><li>伊甸园：所有的对象都是在伊甸园区new出来的</li><li>幸存者区（0，1）</li></ul><h5 id="老年区"><a href="#老年区" class="headerlink" title="老年区"></a>老年区</h5><h5 id="永久区"><a href="#永久区" class="headerlink" title="永久区"></a>永久区</h5><p>这个区域常驻内存的，用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境或类信息，这个区域不存在垃圾回收，关闭JVM虚拟机就会释放这个区域的内存</p><p>一个启动类，加载了大量的第三方jar包。Tomcat部署了太多应用，大量动态生成的反射类，不断的被加载，直到内存满，就会出现OOM</p><ul><li><p>jdk1.6之前：永久代，常量池在堆中</p></li><li><p>jdk1.7：永久代，慢慢的退化了，去永久代，常量池在堆中</p></li><li><p>jdk1.8之后：无永久代，常量池在元空间</p></li></ul><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p>JVM在进行GC时，并不是对这三个区域统一回收，大部分时候，回收都是新生代</p><ul><li>新生代</li><li>幸存区（from，to）</li><li>老年区</li></ul><p>GC两种类：轻GC（普通的GC），重GC（全局GC）</p><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326155927632.png" alt="image-20230326155927632"></p><h5 id="引用计数法："><a href="#引用计数法：" class="headerlink" title="引用计数法："></a>引用计数法：</h5><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326160235161.png" alt="image-20230326160235161"></p><h5 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h5><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326161933840.png" alt="image-20230326161933840"></p><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326170807148.png" alt="image-20230326170807148"></p><ul><li>好处：没有内存的碎片</li><li>坏处：浪费了内存空间：多了一半空间永远是空to,假设对象100%存活（极端情况）</li></ul><p>复制算法最佳使用场景：对象存活度较低的时候；（新生区）</p><h5 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h5><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326185832812.png" alt="image-20230326185832812"></p><ul><li>优点：不需要额外的空间</li><li>缺点：再次扫描，严重浪费时间，会产生内存碎片</li></ul><h5 id="标记压缩"><a href="#标记压缩" class="headerlink" title="标记压缩"></a>标记压缩</h5><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326190316933.png" alt="image-20230326190316933"></p><h5 id="标记清除压缩"><a href="#标记清除压缩" class="headerlink" title="标记清除压缩"></a>标记清除压缩</h5><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326190626331.png" alt="image-20230326190626331"></p><p><img src="C:\Users\h\AppData\Roaming\Typora\typora-user-images\image-20230326190646336.png" alt="image-20230326190646336"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</p><p>内存整齐度：复制算法&#x3D;标记压缩算法&gt;标记清除算法</p><p>内存利用率：标记压缩算法&#x3D;标记清除算法&gt;复制算法</p><p>问题：难道没有最优算法吗？</p><p>答：没有，没有最好的算法，只有最合适的算法。 GC：分代收集算法</p><p>年轻代</p><ul><li>存活率低</li><li>使用复制算法</li></ul><p>老年代</p><ul><li>区域大，存活率高</li><li>标记清除（内存碎片不是太多）+标记压缩混合实现</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ts</title>
    <link href="/2023/03/30/ts/"/>
    <url>/2023/03/30/ts/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/03/30/hello-world/"/>
    <url>/2023/03/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
